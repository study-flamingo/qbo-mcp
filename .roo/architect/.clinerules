# Code generation rules
When testing this MCP Server in development, initialize a user-visible chrome debug window with:
```"C:\Program Files\Google\Chrome\Application\chrome.exe" --remote-debugging-port=9222 --user-data-dir="C:\Users\joelc\temp\vscode-chrome-debug" --no-first-run```

Then, open a browser window to http://localhost:5173.

### Code priorities
**Separation of Concerns**: Clear boundaries between MCP interface (api), business logic (services), data models (models), configuration (config), utilities (utils), and server setup (server.py, main.py).

**Maintainability**: Adding a new tool involves creating/modifying files primarily within api/tools/, services/, and potentially models/, without significantly impacting server.py.

**Testability**: Each layer (api, services, utils) can be tested more independently.

**Readability**: Easier to understand the purpose and scope of each module/package.

# Structure
Unless necessary, try to keep to the following project structure:
```
.
├── .clinerules
├── .gitignore
├── .python-version
├── main.py                 # Minimal entry point: CLI args, logging setup, starts server OR runs auth utility
├── pyproject.toml
├── README.md
├── requirements.txt
├── uv.lock
├── docs/
│   └── project_structure_proposal.md # This file
└── src/
    └── qbo_mcp/
        ├── __init__.py
        ├── server.py           # Defines FastMCP instance, lifespan manager (imports tools/prompts)
        ├── config.py           # Configuration loading
        ├── models/             # Package for data models
        │   ├── __init__.py
        │   ├── common.py       # Common models (e.g., QBOContext)
        │   └── tools.py        # Input/Output models specific to tools
        ├── api/                # Defines the MCP Tools and Prompts interface
        │   ├── __init__.py
        │   ├── prompts.py      # Defines @mcp.prompt functions
        │   └── tools/          # Package for tool definitions
        │       ├── __init__.py     # Imports all tool functions for easy registration
        │       ├── reports.py    # Tool definitions related to reports
        │       ├── resources.py  # Tool definitions related to resources
        │       └── search.py     # Tool definitions related to searching
        ├── services/           # Core business logic interacting with QBO SDK
        │   ├── __init__.py
        │   ├── qbo_client.py   # Handles QBO SDK client setup, connection context
        │   ├── reports.py      # Logic for generating reports
        │   ├── resources.py    # Logic for fetching resources
        │   └── search.py       # Logic for searching transactions
        └── utils/              # Utility functions
            ├── __init__.py
            ├── auth.py         # Contains OAuth flow logic (run_auth_flow) and token management
            └── formatting.py   # Helper functions for formatting results/errors
```

# Commit Messages
When writing commit messages, use the [Conventional Commits](https://www.conventionalcommits.org/en/v1.0.0/#specification) specification:

*The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in RFC 2119.*
- Commits MUST be prefixed with a type, which consists of a noun, feat, fix, etc., followed by the OPTIONAL scope, OPTIONAL !, and REQUIRED terminal colon and space.
- The type feat MUST be used when a commit adds a new feature to your application or library.
- The type fix MUST be used when a commit represents a bug fix for your application.
- A scope MAY be provided after a type. A scope MUST consist of a noun describing a section of the codebase surrounded by parenthesis, e.g., fix(parser):
- A description MUST immediately follow the colon and space after the type/scope prefix. The description is a short summary of the code changes, e.g., fix: array parsing issue when multiple spaces were contained in string.
- A longer commit body MAY be provided after the short description, providing additional contextual information about the code changes. The body MUST begin one blank line after the description.
- A commit body is free-form and MAY consist of any number of newline separated paragraphs.
- One or more footers MAY be provided one blank line after the body. Each footer MUST consist of a word token, followed by either a :<space> or <space># separator, followed by a string value (this is inspired by the git trailer convention).
- A footer’s token MUST use - in place of whitespace characters, e.g., Acked-by (this helps differentiate the footer section from a multi-paragraph body). An exception is made for BREAKING CHANGE, which MAY also be used as a token.
- A footer’s value MAY contain spaces and newlines, and parsing MUST terminate when the next valid footer token/separator pair is observed.
- Breaking changes MUST be indicated in the type/scope prefix of a commit, or as an entry in the footer.
- If included as a footer, a breaking change MUST consist of the uppercase text BREAKING CHANGE, followed by a colon, space, and description, e.g., BREAKING CHANGE: environment variables now take precedence over config files.
- If included in the type/scope prefix, breaking changes MUST be indicated by a ! immediately before the :. If ! is used, BREAKING CHANGE: MAY be omitted from the footer section, and the commit description SHALL be used to describe the breaking change.
- Types other than feat and fix MAY be used in your commit messages, e.g., docs: update ref docs.
- The units of information that make up Conventional Commits MUST NOT be treated as case sensitive by implementors, with the exception of BREAKING CHANGE which MUST be uppercase.
- BREAKING-CHANGE MUST be synonymous with BREAKING CHANGE, when used as a token in a footer.